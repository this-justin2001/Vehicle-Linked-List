import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.LinkedList;

public class vehicleProgram {
	private static void sortByMPG(LinkedList<Vehicle> vehicleList) { //method to sort by MPG
		if(vehicleList.size() >= 2) {
			LinkedList<Vehicle> left = new LinkedList<>(); //creates "left" sublist
			left.addAll(vehicleList.subList(0,vehicleList.size()/2)); //adds left half of LinkedList to sublist
			
			LinkedList<Vehicle> right = new LinkedList<>(); //creates "right" sublist
			right.addAll(vehicleList.subList(vehicleList.size()/2, vehicleList.size())); //adds right half of LinkedList to sublist
			
			sortByMPG(left); //splits left sublists in half to sort
			sortByMPG(right); //splits right sublist in half to sort
			mergeSort(vehicleList,left,right); //calls merge method to sort entire LinkedList
		}
	}
	private static void mergeSort(LinkedList<Vehicle> result, LinkedList<Vehicle> left, LinkedList<Vehicle> right) {//merge sort method imports lists & sublists from sort method
		int count1 = 0; //sublist count 1
		int count2 = 0; //sublist count 2
		
		for(int i = 0; i < result.size();i++) {
			if(count2 >= right.size() || (count1 < left.size() && left.get(count1).compareTo(right.get(count2)) <0)) {//compares mpg values
				result.set(i, left.get(count1)); //sets sorted mpg value to respective iteration
				count1++; //moves count
			} else {
				result.set(i, right.get(count2)); //sets sorted mpg value to respective iteration
				count2++; //moves count
			}
		}
	}
	public static String loopMessage() { //provides message for loop, avoids duplicate code
		return "Enter 0 for MPG to end input";
	}
	public static void incorrectInputMessage()throws InputMismatchException { //provides exception for invalid inputs
		throw new InputMismatchException("Please only enter Y or N");
	}
	public static void pause() throws Exception{ //delays print time for list
		try {
		Thread.sleep(1500); //1500 milliseconds
		}catch(Exception e) {
			System.out.println("ERROR");
		}
	}
	public static void main(String[] args){
		//users entries
		String userMake; 
		String userModel;
		Double userMpg;
		Character confirmation;
		
		Scanner scnr = new Scanner(System.in);
		
		LinkedList<Vehicle> vehicleList = new LinkedList<Vehicle>(); //instantiates LinkedList
		
		System.out.println("Please Enter Vehicle Information");
		System.out.println(loopMessage());
		System.out.println();
		System.out.println("MPG: ");

		userMpg = scnr.nextDouble(); //user MPG entry
		while(userMpg != 0) { //loop that allows user to enter multiple values
			System.out.println("Make: ");
			userMake = scnr.next();//user make entry
			
			System.out.println("Model: ");
			userModel = scnr.next();//user model entry

			vehicleList.add(new Vehicle(userMake,userModel,userMpg));//adds new object to LinkedList
			
			System.out.println();
			System.out.println(loopMessage()); //;prints loopMessage()
			System.out.println();
			System.out.println("MPG: ");
			userMpg = scnr.nextDouble(); //end of loop
		}
		if(userMpg == 0)//condition to end user entry loop
			System.out.println("Vehicle List");
			for(int i = 0; i < vehicleList.size();i++) { //iterative loop to print LinkedList
				try {
				pause();
				System.out.println(vehicleList.get(i).toString());//prints LinkedList and calls toString()
				}catch(Exception e) {
					System.out.println("ERROR"); // try/catch for Thread.sleep() exception handling
				}
			}
			System.out.println();
			System.out.println("Are these the proper entries?");
			System.out.print("Y or N: ");
			confirmation = scnr.next().charAt(0);
		if (Character.toLowerCase(confirmation) == 'y') { //confirms user entered proper information
			System.out.println();
			System.out.println("Would you like these entries sorted?");
			System.out.println("Y or N");
			confirmation = scnr.next().charAt(0);
		}else if(Character.toLowerCase(confirmation) == 'n') { // prints response if user states they entered incorrect info
			System.out.println();
			System.out.println("Sorry about that. Please re-run the program to re-enter your information");
		}else if(Character.toLowerCase(confirmation) != 'y' || Character.toLowerCase(confirmation) != 'n') { // prints exception if invalid value is entered
			incorrectInputMessage();
		}
		if (Character.toLowerCase(confirmation) == 'y') { // prints sorted list if user responds 'y' to line 95
			System.out.println();
			System.out.println("Here's your sorted list");
			sortByMPG(vehicleList); //sorts vehicleList using sortByMPG method
			for(int i = 0; i < vehicleList.size(); i++) {
				try{
				pause();
				System.out.println(vehicleList.get(i).toString());
				}catch(Exception e) {
					System.out.println("ERROR");
				}
			}
			System.out.println("--------------");
			System.out.println("END");
		} else if(Character.toLowerCase(confirmation) == 'n') { //terminates program if user responds 'n' to line 95
			System.out.println();
			System.out.println("Okay, goodbye!");
		} else if(Character.toLowerCase(confirmation)!= 'y' || Character.toLowerCase(confirmation) != 'n') { // prints exception if invalid value is entered
			incorrectInputMessage();
		}
	}
}
